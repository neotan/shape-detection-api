<pre class="metadata">
Title: Accelerated Shape Detection in Images
Repository: wicg/shape-detection-api
Status: ED
ED: https://wicg.github.io/shape-detection-api
Shortname: shape-detection-api
Level: 1
Editor: Miguel Casas-Sanchez, w3cid 82825, Google Inc., mcasas@google.com
Abstract: This document describes an API providing access to accelerated shape detectors (e.g. human faces) for still images and/or live image feeds.
Translation: zh-CN https://wicg.github.io/shape-detection-api/index-zh-cn.html
Group: wicg
!Participate: <a href="https://www.w3.org/community/wicg/">Join the W3C Community Group</a>
!Participate: <a href="https://github.com/WICG/shape-detection-api">Fix the text through GitHub</a>
</pre>

<style>
table {
  border-collapse: collapse;
  border-left-style: hidden;
  border-right-style: hidden;
  text-align: left;
}
table caption {
  font-weight: bold;
  padding: 3px;
  text-align: left;
}
table td, table th {
  border: 1px solid black;
  padding: 3px;
}
</style>

# Introduction # {#introduction}

Photos and images constitute the largest chunk of the Web, and many include recognisable features, such as human faces, QR codes or text. Detecting these features is computationally expensive, but would lead to interesting use cases e.g. face tagging, or web URL redirection. While hardware manufacturers have been supporting these features for a long time, Web Apps do not yet have access to these hardware capabilities, which makes the use of computationally demanding libraries necessary.

## Shape detection use cases

Please see the <a href="https://github.com/WICG/shape-detection-api/blob/gh-pages/README.md">Readme/Explainer</a> in the repository.

# Shape Detection API # {#api}

Individual browsers MAY provide Detectors indicating the availability of hardware providing accelerated operation.

## Image sources for detection

<p class="note">
This section is inspired by [[canvas2dcontext#image-sources-for-2d-rendering-contexts]].
</p>

{{ImageBitmapSource}} allows objects implementing any of a number of interfaces to be used as image sources for the detection process.

* When an {{ImageBitmapSource}} object represents an {{HTMLImageElement}}, the element's image must be used as the source image. Specifically, when an {{ImageBitmapSource}} object represents an animated image in an {{HTMLImageElement}}, the user agent must use the default image of the animation (the one that the format defines is to be used when animation is not supported or is disabled), or, if there is no such image, the first frame of the animation.

* When an {{ImageBitmapSource}} object represents an {{HTMLVideoElement}}, then the frame at the current playback position when the method with the argument is invoked must be used as the source image when processing the image, and the source image's dimensions must be the <a href="https://drafts.csswg.org/css2/conform.html#intrinsic">intrinsic dimensions</a> of the media resource (i.e. after any aspect-ratio correction has been applied).

* When an {{ImageBitmapSource}} object represents an {{HTMLCanvasElement}}, the element's bitmap must be used as the source image.

When the UA is required to use a given type of {{ImageBitmapSource}} as input argument for the<code>detect()</code> method of whichever detector, it MUST run these steps:

* If any {{ImageBitmapSource}} have an effective script origin ([[HTML#concept-origin]]) which is not the same as the Document's effective script origin, then reject the Promise with a new {{DOMException}} whose name is {{SecurityError}}.

* If the {{ImageBitmapSource}} is an {{HTMLImageElement}} object that is in the |broken| state, then reject the Promise with a new {{DOMException}} whose name is {{InvalidStateError}}, and abort any further steps.

* If the {{ImageBitmapSource}} is an {{HTMLImageElement}} object that is not fully decodable then reject the Promise with a new {{DOMException}} whose name is {{InvalidStateError}}, and abort any further steps

* If the {{ImageBitmapSource}} is an {{HTMLVideoElement}} object whose <a href="https://html.spec.whatwg.org/multipage/embedded-content.html#ready-states:dom-media-readystate">|readyState|</a> attribute is either |HAVE_NOTHING| or |HAVE_METADATA|, then reject the Promise with a new {{DOMException}} whose name is {{InvalidStateError}}, and abort any further steps.

* If the {{ImageBitmapSource}} argument is an {{HTMLCanvasElement}} whose bitmap's |origin-clean| ([[HTML#concept-canvas-origin-clean]]) flag is false, then reject the Promise with a new {{DOMException}} whose name is {{SecurityError}}, and abort any further steps.

Note that if the {{ImageBitmapSource}} is an object with either a horizontal dimension or a vertical dimension equal to zero, then the Promise will be simply resolved with an empty sequence of detected objects.

## Face Detection API

{{FaceDetector}} represents an underlying accelerated platform's component for detection of human faces in images. It can be created with an optional Dictionary of {{FaceDetectorOptions}}. It provides a single {{FaceDetector/detect()}} operation on an {{ImageBitmapSource}} which result is a Promise. This method MUST reject this promise in the cases detailed in [[#image-sources-for-detection]]; otherwise it MAY queue a task that utilizes the OS/Platform resources to resolve the Promise with a Sequence of {{DetectedFace}}s, each one essentially consisting on and delimited by a {{DetectedFace/boundingBox}}.

<pre class="idl">
dictionary FaceDetectorOptions {
  unsigned short maxDetectedFaces;
  boolean fastMode;
};
</pre>

<dl class="domintro">
  <dt><dfn dict-member for="FaceDetectorOptions"><code>maxDetectedFaces</code></dfn></dt>
  <dd>Maximum number of detected faces to be identified in the scene.</dd>
  <dt><dfn dict-member for="FaceDetectorOptions"><code>fastMode</code></dfn></dt>
  <dd>Hint to the UA to try and prioritise speed over accuracy by e.g. operating on a reduced scale or looking for large features.</dd>
</dl>

<pre class="idl">
[Exposed=(Window,Worker), Constructor(optional FaceDetectorOptions faceDetectorOptions)]
interface FaceDetector {
  Promise&lt;sequence&lt;DetectedFace>> detect(ImageBitmapSource image);
};
</pre>

<dl class="domintro">
  <dt><dfn constructor for="FaceDetector"><code>FaceDetector(optional FaceDetectorOptions faceDetectorOptions)</code></dfn></dt>
  <dd>Constructs a new {{FaceDetector}} with the optional |faceDetectorOptions|.</dd>
  <dt><dfn method for="FaceDetector"><code>detect()</code></dfn></dt>
  <dd>Tries to detect human faces in the {{ImageBitmapSource}} |image|.  The detected faces, if any, are returned as a sequence of {{DetectedFace}}s.</dd>
</dl>

<pre class="idl">
interface DetectedFace {
  [SameObject] readonly attribute DOMRectReadOnly boundingBox;
};
</pre>

<dl class="domintro">
  <dt><dfn attribute for="DetectedFace"><code>boundingBox</code></dfn></dt>
  <dd>A rectangle indicating the position and extent of a detected feature aligned to the image axes.</dd>
</dl>

<div class="example">
Example implementations of face detection are e.g. <a href="https://developer.android.com/reference/android/media/FaceDetector.html">Android FaceDetector</a>, <a href="https://developer.apple.com/reference/coreimage/cifacefeature?language=objc">Apple's CIFaceFeature</a> or <a href="https://msdn.microsoft.com/library/windows/apps/windows.media.faceanalysis.facedetector.aspx">Windows 10 FaceDetector</a>.
</div>

<div class="note">
  Consider adding attributes such as, e.g.:
  <pre>
    [SameObject] readonly attribute unsigned long id;
    [SameObject] readonly attribute sequence&lt;Landmark>? landmarks;
  </pre>
  to {{DetectedFace}}.
</div>


## Barcode Detection API

{{BarcodeDetector}} represents an underlying accelerated platform's component for detection in images of QR codes or barcodes.  It provides a single {{BarcodeDetector/detect()}} operation on an {{ImageBitmapSource}} which result is a Promise.  This method MUST reject this Promise in the cases detailed in [[#image-sources-for-detection]]; otherwise it MAY queue a task using the OS/Platform resources to resolve the Promise with a sequence of {{DetectedBarcode}}s, each one essentially consisting on and delimited by a {{DetectedBarcode/boundingBox}} and a series or {{Point2D}}s, and possibly a {{DetectedBarcode/rawValue}} decoded {{DOMString}}.

<pre class="idl">
[Exposed=(Window,Worker), Constructor()]
interface BarcodeDetector {
  Promise&lt;sequence&lt;DetectedBarcode>> detect(ImageBitmapSource image);
};
</pre>

<dl class="domintro">
  <dt><dfn method for="BarcodeDetector"><code>detect(ImageBitmapSource image)</code></dfn></dt>
  <dd>Tries to detect barcodes in the {{ImageBitmapSource}} |image|.</dd>
</dl>

<pre class="idl">
interface DetectedBarcode {
  [SameObject] readonly attribute DOMRectReadOnly boundingBox;
  [SameObject] readonly attribute DOMString rawValue;
  [SameObject] readonly attribute sequence&lt;Point2D> cornerPoints;
};
</pre>

<dl class="domintro">
  <dt><dfn attribute for="DetectedBarcode"><code>boundingBox</code></dfn></dt>
  <dd>A rectangle indicating the position and extent of a detected feature aligned to the image.</dd>

  <dt><dfn attribute for="DetectedBarcode"><code>rawValue</code></dfn></dt>
  <dd>String decoded from the barcode. This value might be multiline.</dd>

  <dt><dfn attribute for="DetectedBarcode"><code>cornerPoints</code></dfn></dt>
  <dd>A <a>sequence</a> of corner points of the detected barcode, in clockwise direction and  starting with top-left. This is not necessarily a square due to possible perspective distortions.</dd>
</dl>

<div class="example">
Example implementations of Barcode/QR code detection are e.g. <a href="https://developers.google.com/android/reference/com/google/android/gms/vision/barcode/package-summary">Google Play Services</a> or <a href="https://developer.apple.com/reference/coreimage/ciqrcodefeature?language=objc">Apple's CICRCodeFeature</a>.
</div>

## Text Detection API

{{TextDetector}} represents an underlying accelerated platform's component for detection in images of text.  It provides a single {{TextDetector/detect()}} operation on an {{ImageBitmapSource}} of which the result is a Promise.  This method MUST reject this Promise in the cases detailed in [[#image-sources-for-detection]]; otherwise it MAY queue a task using the OS/Platform resources to resolve the Promise with a sequence of {{DetectedText}}s, each one essentially consisting on a {{DetectedText/rawValue}} and delimited by a {{DetectedText/boundingBox}}.

<pre class="idl">
[
    Constructor,
    Exposed=(Window,Worker),
] interface TextDetector {
    Promise&lt;sequence&lt;DetectedText&gt;&gt; detect(ImageBitmapSource image);
};
</pre>

<dl class="domintro">
  <dt><dfn method for="TextDetector"><code>detect(ImageBitmapSource image)</code></dfn></dt>
  <dd>Tries to detect text blocks in the {{ImageBitmapSource}} |image|.</dd>
</dl>

<pre class="idl">
[
    Constructor,
] interface DetectedText {
    [SameObject] readonly attribute DOMRect boundingBox;
    [SameObject] readonly attribute DOMString rawValue;
};
</pre>

<dl class="domintro">
  <dt><dfn attribute for="DetectedText"><code>boundingBox</code></dfn></dt>
  <dd>A rectangle indicating the position and extent of a detected feature aligned to the image.</dd>

  <dt><dfn attribute for="DetectedText"><code>rawValue</code></dfn></dt>
  <dd>Raw string detected from the image.</dd>
</dl>

<div class="example">
Example implementations of Text code detection are e.g. <a href="https://developers.google.com/android/reference/com/google/android/gms/vision/text/package-summary">Google Play Services</a>, <a href="https://developer.apple.com/reference/coreimage/cidetectortypetext">Apple's CIDetector</a> or <a href="https://msdn.microsoft.com/en-us/library/windows/apps/windows.media.ocr.aspx">Windows 10 <abbr title="Optical Character Recognition">OCR</abbr> API</a>.
</div>

# Examples # {#examples}

<p class="note">
Slightly modified/extended versions of these examples (and more) can be found in
 e.g. <a href="https://codepen.io/collection/DwWVJj/">this codepen collection</a>.
</p>

## Platform support for a given detector

<div class="note">
The following example can also be found in e.g. <a
href="https://codepen.io/miguelao/pen/PbYpMv?editors=0010">this codepen</a>
with minimal modifications.
</div>

<div class="example" highlight="javascript">

<pre>
if (window.FaceDetector == undefined) {
	console.error('Face Detection not supported on this platform');
}
if (window.BarcodeDetector == undefined) {
  console.error('Barcode Detection not supported on this platform');
}
if (window.TextDetector == undefined) {
  console.error('Text Detection not supported on this platform');
}
</pre>
</div>

## Face Detection

<div class="note">
The following example can also be found in e.g.
<a href="https://codepen.io/miguelao/pen/ORYbbm?editors=0010">this codepen</a>.
</div>

<div class="example" highlight="javascript">
<pre>
let faceDetector = new FaceDetector({fastMode: true, maxDetectedFaces: 1});
// Assuming |theImage| is e.g. a &lt;img> content, or a Blob.

faceDetector.detect(theImage)
.then(detectedFaces => {
  for (const face of detectedFaces) {
    console.log(' Face @ (${face.boundingBox.x}, ${face.boundingBox.y}),' +
        ' size ${face.boundingBox.width}x${face.boundingBox.height}');
  }
}).catch(() => {
  console.error("Face Detection failed, boo.");
})
</pre>
</div>

## Barcode Detection

<div class="note">
The following example can also be found in e.g.
<a href="https://codepen.io/miguelao/pen/wgrYjZ?editors=0010">this codepen</a>.
</div>

<div class="example" highlight="javascript">
<pre>
let barcodeDetector = new BarcodeDetector();
// Assuming |theImage| is e.g. a &lt;img> content, or a Blob.

barcodeDetector.detect(theImage)
.then(detectedCodes => {
  for (const barcode of detectedCodes) {
    console.log(' Barcode ${barcode.rawValue}' +
        ' @ (${barcode.boundingBox.x}, ${barcode.boundingBox.y}) with size' +
        ' ${barcode.boundingBox.width}x${barcode.boundingBox.height}');
  }
}).catch(() => {
  console.error("Barcode Detection failed, boo.");
})
</pre>
</div>

## Text Detection

<div class="note">
The following example can also be found in e.g.
<a href="https://codepen.io/miguelao/pen/ygxVqg">this codepen</a>.
</div>

<div class="example" highlight="javascript">
<pre>
let textDetector = new TextDetector();
// Assuming |theImage| is e.g. a &lt;img> content, or a Blob.

textDetector.detect(theImage)
.then(detectedTextBlocks => {
  for (const textBlock of detectedTextBlocks) {
    console.log(
        'text @ (${textBlock.boundingBox.x}, ${textBlock.boundingBox.y}), ' +
        'size ${textBlock.boundingBox.width}x${textBlock.boundingBox.height}');
  }
}).catch(() => {
  console.error("Text Detection failed, boo.");
})
</pre>
</div>


<pre class="anchors">
spec: ECMAScript; urlPrefix: https://tc39.github.io/ecma262/#
    type: interface
        text: Array; url: sec-array-objects
        text: Promise; url:sec-promise-objects
        text: TypeError; url: sec-native-error-types-used-in-this-standard-typeerror
</pre>

<pre class="anchors">
type: interface; text: Point2D; url: https://w3c.github.io/mediacapture-image/#Point2D;
</pre>

<pre class="anchors">
type: interface; text: DOMString; url: https://heycam.github.io/webidl/#idl-DOMString; spec: webidl
</pre>

<pre class="link-defaults">
spec: html
    type: dfn
        text: allowed to show a popup
        text: in parallel
        text: incumbent settings object
</pre>

<pre class="biblio">
{
  "wikipedia": {
      "href": "https://en.wikipedia.org/wiki/Object-class_detection",
      "title": "Object-class Detection Wikipedia Entry",
      "publisher": "Wikipedia",
      "date": "14 September 2016"
  },
  "canvas2dcontext": {
      "authors": [ "Rik Cabanier", "Jatinder Mann", "Jay Munro", "Tom Wiltzius",
                   "Ian Hickson"],
      "href": "https://www.w3.org/TR/2dcontext/",
      "title": "HTML Canvas 2D Context",
      "status": "REC"
  }
}
</pre>
